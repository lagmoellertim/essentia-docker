name: Build Docker Images

on:
  workflow_dispatch:
    inputs:
      ESSENTIA_COMMIT:
        description: "Essentia commit hash build"
        required: true
        type: string
      LATEST:
        description: "Also push as latest tag"
        required: false
        default: false
        type: boolean
      TAG:
        description: "Additional tag to publish (optional)"
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/essentia

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: "essentia"
            dockerfile: "Dockerfile"
            args: |
              ENABLE_TENSORFLOW=0
              ENABLE_VAMP=1
              ESSENTIA_COMMIT=${{ github.event.inputs.ESSENTIA_COMMIT }}
            platforms: "linux/amd64,linux/arm64"
            runs-on: "ubuntu-24.04"
            suffix: ""
          - name: "essentia-tensorflow"
            dockerfile: "Dockerfile"
            args: |
              ENABLE_TENSORFLOW=1
              TENSORFLOW_USE_GPU=0
              ENABLE_VAMP=1
              ESSENTIA_COMMIT=${{ github.event.inputs.ESSENTIA_COMMIT }}
            platforms: "linux/amd64,linux/arm64"
            runs-on: "ubuntu-24.04"
            suffix: "-tensorflow"
          - name: "essentia-tensorflow-gpu"
            dockerfile: "Dockerfile"
            args: |
              ENABLE_TENSORFLOW=1
              TENSORFLOW_USE_GPU=1
              ENABLE_VAMP=1
              ESSENTIA_COMMIT=${{ github.event.inputs.ESSENTIA_COMMIT }}
            platforms: "linux/amd64"
            runs-on: "ubuntu-24.04"
            suffix: "-tensorflow-gpu"

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute tags
        id: compute-tags
        run: |
          SHORT_SHA=$(echo "${{ github.event.inputs.ESSENTIA_COMMIT }}" | cut -c1-7)
          echo "Short SHA: $SHORT_SHA"
          
          TAGS="type=raw,value=${SHORT_SHA}${{ matrix.suffix }}"
          echo "Base tag: ${SHORT_SHA}${{ matrix.suffix }}"
          
          if [[ "${{ github.event.inputs.LATEST }}" == "true" ]]; then
            TAGS="$TAGS"$'\n'"type=raw,value=latest${{ matrix.suffix }}"
            echo "Adding latest tag: latest${{ matrix.suffix }}"
          fi
          
          if [[ -n "${{ github.event.inputs.TAG }}" ]]; then
            TAGS="$TAGS"$'\n'"type=raw,value=${{ github.event.inputs.TAG }}${{ matrix.suffix }}"
            echo "Adding custom tag: ${{ github.event.inputs.TAG }}${{ matrix.suffix }}"
          fi
          
          echo "Final tags output:"
          echo "$TAGS"
          
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.compute-tags.outputs.tags }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          build-args: ${{ matrix.args }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}
