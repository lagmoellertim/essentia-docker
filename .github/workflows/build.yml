name: Build Docker Images

on:
  workflow_dispatch:
    inputs:
      ESSENTIA_COMMIT:
        description: "Essentia commit hash build"
        required: true
        type: string
      LATEST:
        description: "Also push as latest tag"
        required: false
        default: false
        type: boolean
      TAG:
        description: "Additional tag to publish (optional)"
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/essentia

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "essentia"
            dockerfile: "Dockerfile"
            variant: "base"
            args: |
              ENABLE_TENSORFLOW=0
              ENABLE_VAMP=1
              ESSENTIA_COMMIT=${{ github.event.inputs.ESSENTIA_COMMIT }}
            platform: "linux/amd64"
            runs-on: "ubuntu-24.04"
            suffix: ""
          - name: "essentia-arm64"
            dockerfile: "Dockerfile"
            variant: "base"
            args: |
              ENABLE_TENSORFLOW=0
              ENABLE_VAMP=1
              ESSENTIA_COMMIT=${{ github.event.inputs.ESSENTIA_COMMIT }}
            platform: "linux/arm64"
            runs-on: "ubuntu-24.04-arm"
            suffix: ""
          - name: "essentia-tensorflow"
            dockerfile: "Dockerfile"
            variant: "tensorflow"
            args: |
              ENABLE_TENSORFLOW=1
              TENSORFLOW_USE_GPU=0
              ENABLE_VAMP=1
              ESSENTIA_COMMIT=${{ github.event.inputs.ESSENTIA_COMMIT }}
            platform: "linux/amd64"
            runs-on: "ubuntu-24.04"
            suffix: "-tensorflow"
          - name: "essentia-tensorflow-arm64"
            dockerfile: "Dockerfile"
            variant: "tensorflow"
            args: |
              ENABLE_TENSORFLOW=1
              TENSORFLOW_USE_GPU=0
              ENABLE_VAMP=1
              ESSENTIA_COMMIT=${{ github.event.inputs.ESSENTIA_COMMIT }}
            platform: "linux/arm64"
            runs-on: "ubuntu-24.04-arm"
            suffix: "-tensorflow"
          - name: "essentia-tensorflow-gpu"
            dockerfile: "Dockerfile"
            variant: "tensorflow-gpu"
            args: |
              ENABLE_TENSORFLOW=1
              TENSORFLOW_USE_GPU=1
              ENABLE_VAMP=1
              ESSENTIA_COMMIT=${{ github.event.inputs.ESSENTIA_COMMIT }}
            platform: "linux/amd64"
            runs-on: "ubuntu-24.04"
            suffix: "-tensorflow-gpu"

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "VARIANT_NAME=${{ matrix.variant }}" >> $GITHUB_ENV
          echo "VARIANT_SUFFIX=${{ matrix.suffix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          build-args: ${{ matrix.args }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true
          push: true
          cache-from: type=gha,scope=${{ env.VARIANT_NAME }}-${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,mode=max,scope=${{ env.VARIANT_NAME }}-${{ env.PLATFORM_PAIR }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "${digest}" > "${{ runner.temp }}/digests/digest-${{ env.PLATFORM_PAIR }}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.VARIANT_NAME }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-24.04
    needs: build
    strategy:
      matrix:
        variant_name: ["base", "tensorflow", "tensorflow-gpu"]
        include:
          - variant_name: "base"
            variant_suffix: ""
          - variant_name: "tensorflow"
            variant_suffix: "-tensorflow"
          - variant_name: "tensorflow-gpu"
            variant_suffix: "-tensorflow-gpu"
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ matrix.variant_name }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          SHORT_SHA=$(echo "${{ github.event.inputs.ESSENTIA_COMMIT }}" | cut -c1-7)

          # Build tags array
          TAGS=("${SHORT_SHA}${{ matrix.variant_suffix }}")

          if [[ "${{ github.event.inputs.LATEST }}" == "true" ]]; then
            TAGS+=("latest${{ matrix.variant_suffix }}")
          fi

          if [[ -n "${{ github.event.inputs.TAG }}" ]]; then
            TAGS+=("${{ github.event.inputs.TAG }}${{ matrix.variant_suffix }}")
          fi

          # Create tag arguments
          TAG_ARGS=""
          for tag in "${TAGS[@]}"; do
            TAG_ARGS="$TAG_ARGS -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$tag"
          done

          # Use all downloaded digests for this variant
          DIGEST_ARGS=""
          for file in digest-*; do
            if [[ -f "$file" ]]; then
              digest=$(cat "$file")
              DIGEST_ARGS="$DIGEST_ARGS ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${digest}"
            fi
          done

          # Ensure we have at least one digest
          if [[ -z "$DIGEST_ARGS" ]]; then
            echo "Error: No digests found for variant ${{ matrix.variant_name }}"
            exit 1
          fi

          # Create manifest list
          docker buildx imagetools create $TAG_ARGS $DIGEST_ARGS

      - name: Inspect image
        run: |
          SHORT_SHA=$(echo "${{ github.event.inputs.ESSENTIA_COMMIT }}" | cut -c1-7)
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHORT_SHA}${{ matrix.variant_suffix }}

  update-description:
    runs-on: ubuntu-24.04
    needs: merge
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: lagmoellertim/essentia
          readme-filepath: ./README.md
